version: 0.1.{build}

shallow_clone: true

image: Visual Studio 2017

environment:
  appveyor_api_key:
    secure:
      JCVa4YmZI+ct0f0LSYPOBFzK1rw/UM2xEgka3UgvXhI=
  makefile_location: "."
  makefile_name: makefile.libretro
  target_name: fceumm

configuration:
  - release

platform:
  - windows_msvc2017_uwp_x64
  - windows_msvc2017_uwp_x86
  - windows_msvc2017_uwp_arm
  - windows_msvc2017_desktop_x64
  - windows_msvc2017_desktop_x86
  - nuget

init:
  - set Path=C:\msys64\usr\bin;%Path%

build_script:
  -cmd: |
      echo PLatform: %PLATFORM%
      IF %PLATFORM% NEQ "nuget" (
        cd %makefile_location%
        make -f %makefile_name% platform=%platform%
      )

after_build:
  -ps: |
      if($env:PLATFORM -eq "nuget")
      {
        $apiUrl = $env:APPVEYOR_API_URL
        $token = $env:appveyor_api_key
        $headers = @{
          "Authorization" = "Bearer $token"
          "Content-type" = "application/json"
        }
        $accountName = $env:APPVEYOR_ACCOUNT_NAME
        $projectSlug = $env:APPVEYOR_PROJECT_SLUG

        $downloadLocation = $projectSlug
        $downloadLocation = New-Item -ItemType Directory -Force -Path $downloadLocation
        $downloadLocation = $downloadLocation.FullName

        # platform monikers neded for package creation
        $expectedPlatformsMonikers = @("uwp_x64", "uwp_x86", "uwp_arm", "desktop_x64", "desktop_x86")

        Write-Output "Determining build jobs"
        # get project with last build details
        $project = Invoke-RestMethod -Method Get -Uri "$apiUrl/projects/$accountName/$projectSlug" -Headers $headers
        $jobs = $project.build.jobs

        $expectedPlatformsFound = $true
        foreach($i in $expectedPlatformsMonikers)
        {
            $matchingJob = $jobs | Where-Object {$_.name -like "*$i*" -and $_.status -eq "success"}
            if($matchingJob -eq $null)
            {
                $expectedPlatformsFound = $false
                break;
            }
        }

        if(!$expectedPlatformsFound)
        {
          throw "Some required jobs missing. Terminating"
        }

        $commonArtifactsDownloaded = $false
        foreach($job in $project.build.jobs)
        {
            $jobId = $job.jobId
            $jobName = $job.name -replace "Platform: ", ""

            Write-Output "Downloading artifacts for job: $jobName"

            # create job subdir
            $jobDir = "$downloadLocation\$jobName"
            $jobDir = New-Item -ItemType Directory -Force -Path $jobDir
            $jobDir =$jobDir.FullName
            
            # get job artifacts
            $artifacts = Invoke-RestMethod -Method Get -Uri "$apiUrl/buildjobs/$jobId/artifacts" -Headers $headers

            # common artifacts
            if(!$commonArtifactsDownloaded)
            {
                $commonArtifacts = $artifacts | Where-Object {$_.fileName -like "*.h" -or $_.fileName -like "*.nuspec"-or $_.fileName -like "*.targets"}
                foreach($artifact in $commonArtifacts)
                {
                    $artifactFullName = $artifact.fileName
                    $artifactName = Split-Path -Path $artifactFullName -Leaf
                    $localArtifactPath = "$downloadLocation\$artifactName"
            
                    Write-Output "Downloading: $artifactName"
                    Invoke-RestMethod -Method Get -Uri "$apiUrl/buildjobs/$jobId/artifacts/$artifactFullName" `
                    -OutFile $localArtifactPath -Headers @{ "Authorization" = "Bearer $token" }
                }

                $commonArtifactsDownloaded = $true
            }


            # platform specific artifacts
            $artifacts = $artifacts | Where-Object {$_.fileName -like "*.dll" -or $_.fileName -like "*.lib" -or $_.fileName -like "*.pdb" -or $_.fileName -like "*.exp"}
            foreach($artifact in $artifacts)
            {
                $artifactFullName = $artifact.fileName
                $artifactName = Split-Path -Path $artifactFullName -Leaf
                $localArtifactPath = "$jobDir\$artifactName"

                Write-Output "Downloading: $artifactName"
                Invoke-RestMethod -Method Get -Uri "$apiUrl/buildjobs/$jobId/artifacts/$artifactFullName" `
                -OutFile $localArtifactPath -Headers @{ "Authorization" = "Bearer $token" }
            }
        }

        # get nuspec file
        $nuspecFile = Get-ChildItem -Path $downloadLocation -Filter "*.nuspec"
        if($nuspecFile -eq $null)
        {
            throw "No nuspec file found. Terminating"
        }

        &nuget pack $nuspecFile.FullName -version $env:APPVEYOR_BUILD_NUMBER
      }


artifacts:
  - path: '**\%target_name%*.dll'
  - path: '**\%target_name%*.lib'
  - path: '**\%target_name%*.pdb'
  - path: '**\libretro.h'
  - path: '**\*.nupkg'
